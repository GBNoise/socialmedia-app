generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = "postgresql://postgres@localhost:5432/letzie"
}



model User {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    username String @db.VarChar(20) @unique
    password String @db.VarChar(255)
    email String @db.VarChar(255) @unique
    emailVerified DateTime?
    roles RolesOnUser[]
    profile Profile?
    posts Post[] @relation("user posts")
    images Image[]
    accounts Account[]
    sessions Session[]
    likedPosts Post[] @relation("user liked posts")
    friends User[] @relation("friends")
    friendsRelation User[] @relation("friends")
    savedPosts Post[] @relation("saved posts")
}

model Account {
    id String @id @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.Text
    access_token String? @db.Text 
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.Text
    session_state String? 

    user User @relation(fields:[userId], references:[id], onDelete:Cascade)
    @@unique([provider,providerAccountId])
}

model Session {
    id String @id @default(cuid())
    sessionToken String @unique
    userId String
    expires DateTime 
    user User @relation(fields:[userId], references:[id], onDelete:Cascade)
}

model VerificationToken {
    identifier String
    token String @unique
    expires DateTime 

    @@unique([identifier,token])
}

model RolesOnUser {
    user User @relation(fields:[userID],references:[id])
    userID String
    role Roles @relation(fields:[roleName],references:[name])
    roleName String
    @@id([userID,roleName])
}

model Roles {
    name String @id
    users RolesOnUser[]
}

model Profile {
    id Int @id @default(autoincrement())
    OwnerID String @unique
    Owner User @relation(fields:[OwnerID],references:[id])
    quote String @db.VarChar(1000)
    picture String
}

model Post {
    id Int @id @default(autoincrement())
    ownerID String
    owner User @relation("user posts",fields:[ownerID],references:[id])
    content String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    images Image[]
    likedBy User[] @relation("user liked posts")
    savedBy User[] @relation("saved posts")
}

model Image {
    path String @id
    ownerID String
    owner User @relation(fields:[ownerID],references:[id])
    postID Int
    post Post @relation(fields:[postID],references:[id])
}